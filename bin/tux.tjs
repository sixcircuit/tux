"use strict";

var _ = require("dry-underscore");
var tux = require('../');

var exit = _.exit

process.on('uncaughtException', exit);

_.measurer.measure("tux", "total time");

var log = _.log;
var logLevel = "info";
var verbose = false;

function run(){

    var args = process.argv.slice(2);

    log.level(logLevel);
    verbose = log.verbose();

    var err = null;

    var sessionName = "";

    if(args.length > 0){ sessionName = args.shift(); }

    log.debug("about to run session: ", sessionName);

    var cwd = _.path.cwd;

    // await{ _.fs.findInParents(cwd(), ".tux.json", _.plumb(defer(root), callback)); }
    // await{ _.fs.findInParents(cwd(), ".tux.json", _.plumb(defer(root), callback)); }

    var configPath = _.path.home(".tux.json");
    await{ _.fs.evalFile(configPath, _.plumb(defer(var err, data), exit, [_.error.noent])); }

    if(err){ exit(_.error("NoConfig", "File not found: " + configPath + ". You need a config file for this to work.")); }

    if(!sessionName){ 
        _.stderr("abort: You must enter a session name.");
        _.stderr("usage: tux <session name>");
        _.exit(1);
    }

    var session = data[sessionName];
    if(!session){ exit(_.error("NoConfigSection", "config file section not found: " + sessionName + ". You need a config file section for this to work.")); }

    await{ tux.sessions.exists(sessionName, _.plumb(defer(var exists), exit)); }

    if(exists){
        await{ tux.sessions.attach(sessionName, _.plumb(defer(), exit)); }
        return;
    }

    _.each.async(session.windows, function(cmd, i, next, done){
        await{ tux.windows.create(sessionName, i+1, cmd.cmd, session.cwd, _.plumb(defer(), exit)); }
        next();
    }, function(){
        _.measurer.measure("tux", "total time");
        // _.stderr("total time: ", _.measurer.last("tux", "total time"), "ms");
        await{ tux.sessions.attach(sessionName, _.plumb(defer(), exit)); }
    });
}

exports.run = run;

