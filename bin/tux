#!/usr/bin/env node

"use strict";

const os = require('os');
const path = require('path');
const _ = require("../lib/_.js");

const tmux = require("../lib/tmux.js");

function get_config(){
   const config_path = path.join(os.homedir(), ".tux.js");

   let config;

   try{ config = require(config_path); }
   catch(e){
      throw _.error("config_error", "missing config file ~/.tux.js or there was a problem with it: ", e.toString());
   }

   _.each(config, function(session, key){
      if(_.is_ary(session)){
         config[key] = _.merge({ tabs: session });
      }else{
         config[key] = _.merge(session, {
            name: key,
            title: session.title || key,
            dir: _.path.expand_tilde(session.dir || _.fatal("missing dir for: ", key))
         });
      }
   });

   return(config);
}

const _cmds = {};

const help = function(exit){

   const str = [
      `usage: tux [ ${ _.keys(_cmds).join(", ") }, <session_name>]`
   ];

   _.stdout(...str);

   if(_.def(exit)){ _.exit(exit); }
}

_cmds.help = help;

_cmds["."] = function(){

};

_cmds.init = function(){

};

_cmds.save = function(){

}

_cmds.lay = _cmds.layout = function([ name ]){
   tmux.layout({ name });
};

_cmds.at = function(){
   console.dir(tmux);
   const { stdout } = tmux.run("list-sessions");
   _.stdout.write(stdout);
};

_cmds.ls = function(){

   const config = get_config();

   _.each(config, function(session, key){
      if(_.is_ary(session)){
         _.stdout(key + ": ", session.join(", "));
      }else{
         _.stdout(key + ": ", session.dir || "<no cwd>");
      }
   });
};

_cmds.run = async function([ session_name ]){

   const config = get_config();

   if(!session_name){
      _.stderr("abort: You must enter a session name.");
      return help(1);
   }

   let session = config[session_name];

   if(!session){
      _.stderr(`error: config file section not found: "${ session_name }". you need a config file section for this to work.`);
      _.exit(1);
   }

   if(tmux.session.exists(session)){
      _.debug("session exists: ", session.name);
      _.debug("attaching.");
      return tmux.session.attach(session);
   }

   await tmux.session.create({ session });

   tmux.session.attach(session);
};

;(function main(){

   const args = process.argv.slice(2);

   const cmd = args.shift();

   if(_.undef(cmd)){ return help(); }

   if(_cmds[cmd]){ return _cmds[cmd](args); }
   else{ _cmds.run([ cmd ]); }

})();
