"use strict";

var _ = require('dry-underscore');

function tmux(){ }

tmux.prototype.run = function(cmd, args, cb){
    args.unshift(cmd);
    _.exec("tmux", args, cb); 
};

tmux.prototype.runShell = function(cmd, args, cb){
    args.unshift(cmd);
    _.shell("tmux", args, cb); 
};

function sessions(lib){ this.tmux = lib; }

sessions.prototype.exists = function(sessionName, cb){
    await{ this.tmux.run('has-session', ['-t', sessionName], defer(var code, stdout, stderr)); } 
    cb(null, code === 0, stdout, stderr);
};

sessions.prototype.attach = function(sessionName, cb){
    this.tmux.runShell('attach-session', ['-t', sessionName], cb); 
};


sessions.prototype.create = function(sessionName, dir, cb){
    this.tmux.run('new-session', ['-d', '-c', dir, '-s', sessionName], cb);
};

function windows(sessions){ this.sessions = sessions; this.tmux = this.sessions.tmux; }

windows.prototype.create = function(sessionName, number, command, dir, cb){

    await{ this.sessions.exists(sessionName, _.plumb(defer(var exists), cb)); }

    if(!exists){
        await{ this.sessions.create(sessionName, dir, _.plumb(defer(), cb)); } 
    }else{
        await{ this.tmux.run('new-window', ['-t', sessionName + ":" + number, "-c", dir], _.plumb(defer(), cb)); } 
    }
    await{ this.tmux.run('send-keys', [_.stringify(command), "C-m"], _.plumb(defer(), cb)); } 

    cb();
};

var lib = new tmux();
lib.sessions = new sessions(lib);
lib.windows = new windows(lib.sessions);

module.exports = lib;
